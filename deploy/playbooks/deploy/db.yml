---
- hosts: db
  user: "{{ login_user }}"
  become: yes

  vars:
    ssl_cert_file: "/etc/ssl/certs/server.crt"
    ssl_key_file: "/etc/ssl/private/server.key"

  pre_tasks:
    - name: "Copy over SSL certificate to {{ ssl_cert_file }}"
      copy: content="{{ database_ssl_cert }}" dest="{{ ssl_cert_file }}" owner=root group=root mode=0644
      tags: [postgresql]

    - name: "Copy over SSL key to {{ ssl_key_file }}"
      copy: content="{{ database_ssl_key }}" dest="{{ ssl_key_file }}" owner=root group=root mode=0666
      tags: [postgresql]

    - set_fact:
        postgres_clients:
          - "{{ _env_combined.CUSTOM_REDIS_HOST }}"
          - "{{ _env_combined.CUSTOM_API_HOST }}"
      tags: [postgresql]

    - set_fact:
        postgres_clients: "{{ postgres_clients | map('regex_replace', '(.*)', '\\1/32') | list }}"
      tags: [postgresql]

    - set_fact:
        connection:
          type: "host" # `hostssl` to accept ONLY ssl connections
          database: "{{ _env_combined.CUSTOM_DATABASE_NAME }}"
          user: "{{ _env_combined.CUSTOM_DATABASE_USER }}"
          address: "{{ item }}"
          method: "md5"
      with_items: "{{ postgres_clients }}"
      register: postgres_hba_connections
      tags: [postgresql]

    - set_fact:
        postgres_hba_connections: "{{ postgres_hba_connections.results | map(attribute='ansible_facts.connection') | list }}"
      tags: [postgresql]

  post_tasks:
    - name: "Add SUPERUSER privileges to database user, except in production"
      postgresql_user:
        name: "{{ _env_combined.CUSTOM_DATABASE_USER }}"
        role_attr_flags: "CREATEDB,SUPERUSER"
      when: env != "production"

  roles:
    - role: postgresql
      tags: [postgresql]
      postgresql_version: 9.5
      postgresql_encoding: 'UTF-8'
      postgresql_locale: 'en_US.UTF-8'

      # be careful: check whether the postgresql/postgis versions work together
      # sudo apt-get install postgresql-9.5-postgis-2.3
      postgresql_ext_postgis_version: "2.3"
      postgresql_ext_install_postgis: yes

      postgresql_ssl: on # `off`

      postgresql_ssl_cert_file: "{{ ssl_cert_file }}"
      postgresql_ssl_key_file: "{{ ssl_key_file }}"

      postgresql_admin_user: "postgres"
      postgresql_default_auth_method: "trust"

      postgresql_listen_addresses:
        - "*"

      postgresql_pg_hba_custom: "{{ postgres_hba_connections }}"

      postgresql_databases:
        - name: "{{ _env_combined.CUSTOM_DATABASE_NAME }}"
          owner: "{{ _env_combined.CUSTOM_DATABASE_USER }}"
          postgis: yes
      postgresql_users:
        - name: "{{ _env_combined.CUSTOM_DATABASE_USER }}"
          pass: "{{ _env_combined.CUSTOM_DATABASE_PASSWORD }}"
          encrypted: no
      postgresql_database_extensions:
        - db: "{{ _env_combined.CUSTOM_DATABASE_NAME }}"
          extensions:
            - postgis
      postgresql_user_privileges:
        - name: "{{ _env_combined.CUSTOM_DATABASE_USER }}"
          db: "{{ _env_combined.CUSTOM_DATABASE_NAME }}"
          priv: "ALL"

      # every petition gets logged to /var/log/postgresql/postgresql-9.5-main.log
      postgresql_log_statement: all

    - role: aws_cli
      tags: [aws_cli]
      aws_access_key_id: "{{ _env_combined.CUSTOM_AWS_ACCESS_KEY }}"
      aws_secret_access_key: "{{ _env_combined.CUSTOM_AWS_SECRET_KEY }}"
      user: "{{ login_user }}"
      group: "{{ login_user }}"

    - role: cron
      tags: [cron]
      scripts:
        - script: "backup-db.sh"
          frequency: "0 0 * * *"
          user: "{{ login_user }}"

    - role: logrotate
      tags: [logrotate]
      scripts: []
      crontab_frequency: "*/30 * * * *"

    - role: iptables
      tags: [iptables]
      firewall_allowed_tcp_ports:
        - "22"
        - "25"
      firewall_allowed_private_tcp_ports:
        - "5432"
      when: env != "development"
