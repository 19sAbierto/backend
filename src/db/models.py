from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import JSONField

from db import BaseModel
from db.choices import ACTION_CHOICES, ACTION_SOURCE_CHOICES


class Locality(BaseModel):
    """INEGI's "localidad".
    """
    name = models.TextField(blank=False)
    cvegeo = models.TextField(unique=True)
    meta = JSONField(help_text="File URLs, etc")


class LocalityStatisticsLog(BaseModel):
    """Log for locality statistics.
    """
    locality = models.ForeignKey('Locality')
    statistics = JSONField(help_text="Statistics associated with locality, generated by DS")
    version = models.TextField(help_text="Let's DS change structure without breaking clients")
    recorded = models.DateTimeField(default=timezone.now, blank=True)

    class Meta:
        unique_together = ('recorded', 'locality', 'version')


class Organization(BaseModel):
    """A reconstruction actor or data-gathering organization.
    """
    name = models.TextField()
    description = models.TextField()
    contact = JSONField(help_text="Contact data")


class Action(BaseModel):
    """Action related to reconstruction.
    """
    key = models.TextField(unique=True)
    source = models.TextField(choices=ACTION_SOURCE_CHOICES)
    locality = models.ForeignKey('Locality')
    organization = models.ForeignKey('Organization')
    action_type = models.TextField(choices=ACTION_CHOICES)
    initial_budget = models.FloatField()
    budget = models.FloatField()
    total_spent = models.FloatField()
    description = models.TextField()


class ActionLog(BaseModel):
    """Log that tracks state of `Action` table.
    """
    action = models.ForeignKey('Action')
    spent = models.FloatField(null=True)
    percent_complete = models.FloatField()
    location = models.PointField(db_index=True, null=True)
    initial_budget = models.FloatField()
    budget = models.FloatField()
    total_spent = models.FloatField()
    description = models.TextField()
    recorded = models.DateTimeField(default=timezone.now, blank=True)

    class Meta:
        unique_together = ('action', 'recorded')


class Observer(BaseModel):
    """User of the observation mobile app, NOT a user of this application.
    """
    email = models.EmailField(unique=True)
    full_name = models.CharField(max_length=100)


class Observation(BaseModel):
    """Observation uploaded to platform via mobile app.
    """
    locality = models.ForeignKey('Locality')
    observer = models.ForeignKey('Observer', blank=True)
    location = models.PointField(db_index=True, null=False)
    data = JSONField(help_text="Observation form data, such as description, type, file URLs")
    source_id = models.TextField(help_text="Identifier for observation's source")
    schema_id = models.TextField(help_text="Identifier for observation's schema")
    recorded = models.DateTimeField(default=timezone.now, blank=True)


class OrganizationObservation(BaseModel):
    """Observation from data-gathering organization, defined for a certain point
    or for a locality.
    """
    locality = models.ForeignKey('Locality')
    generator = models.ForeignKey('Organization that generated this observation')
    location = models.PointField(db_index=True, null=True)
    data = JSONField(help_text="Data for this observation, generated by DS")
    version = models.TextField("Lets DS change structure without breaking clients")
    data_set = models.TextField('Data set/source of this observation')
    recorded = models.DateTimeField(default=timezone.now, blank=True)
