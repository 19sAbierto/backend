# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-10-19 18:51
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('key', models.TextField(unique=True)),
                ('source', models.TextField(choices=[('google_sheets', 'Google Sheets'), ('chucky', 'Chucky')])),
                ('action_type', models.TextField(choices=[('house_repair', 'Reconstrucci贸n Vivienda'), ('store_repair', 'Reconstrucci贸n Negocio'), ('school_repair', 'Reconstrucci贸n Escuela'), ('other_repair', 'Reconstrucci贸n Otra'), ('water', 'Agua'), ('power', 'Electricidad')])),
                ('initial_budget', models.FloatField()),
                ('budget', models.FloatField()),
                ('total_spent', models.FloatField()),
                ('description', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActionLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('spent', models.FloatField(null=True)),
                ('percent_complete', models.FloatField()),
                ('location', django.contrib.gis.db.models.fields.PointField(db_index=True, null=True, srid=4326)),
                ('initial_budget', models.FloatField()),
                ('budget', models.FloatField()),
                ('total_spent', models.FloatField()),
                ('description', models.TextField()),
                ('recorded', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Action')),
            ],
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.TextField()),
                ('cvegeo', models.TextField(unique=True)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(help_text='File URLs, etc')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LocalityStatisticsLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('statistics', django.contrib.postgres.fields.jsonb.JSONField(help_text='Statistics associated with locality, generated by DS')),
                ('version', models.TextField(help_text="Let's DS change structure without breaking clients")),
                ('recorded', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('locality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Locality')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(db_index=True, srid=4326)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(help_text='Observation form data, such as description, type, file URLs')),
                ('source_id', models.TextField(help_text="Identifier for observation's source")),
                ('schema_id', models.TextField(help_text="Identifier for observation's schema")),
                ('recorded', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('locality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Locality')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Observer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('contact', django.contrib.postgres.fields.jsonb.JSONField(help_text='Contact data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationObservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(db_index=True, null=True, srid=4326)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(help_text='Data for this observation, generated by DS')),
                ('version', models.TextField(verbose_name='Lets DS change structure without breaking clients')),
                ('data_set', models.TextField(verbose_name='Data set/source of this observation')),
                ('recorded', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('generator', models.ForeignKey(help_text='Organization that generated this observation', on_delete=django.db.models.deletion.CASCADE, to='map.Organization')),
                ('locality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Locality')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='observation',
            name='observer',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='map.Observer'),
        ),
        migrations.AddField(
            model_name='action',
            name='locality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Locality'),
        ),
        migrations.AddField(
            model_name='action',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='map.Organization'),
        ),
        migrations.AlterUniqueTogether(
            name='localitystatisticslog',
            unique_together=set([('recorded', 'locality', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='actionlog',
            unique_together=set([('action', 'recorded')]),
        ),
    ]
